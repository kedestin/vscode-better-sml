{
        "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
        "version": "https://github.com/atom/language-go/commit/b6fd68f74efa109679e31fe6f4a41ac105262d0e",
        "fileTypes": [
                "sml",
                "sig",
                "fun",
                "ml",
                "ML"
        ],
        "scopeName": "source.sml",
        "keyEquivalent": "^~S",
        "name": "Standard ML",
        "patterns": [
                {
                        "include": "#comments"
                },
                {
                        "match": "\\b(val|datatype|signature|type|op|sharing|struct|as|let|in|abstype|local|where|case|of|fn|raise|exception|handle|ref|infix|infixr|before|end|structure|withtype)\\b",
                        "name": "keyword.other.ml"
                },
                {
                        "begin": "\\b(let)\\b",
                        "captures": {
                                "1": {
                                        "name": "keyword.other.ml"
                                },
                                "2": {
                                        "name": "keyword.other.ml"
                                }
                        },
                        "end": "\\b(end)\\b",
                        "name": "meta.exp.let.ml",
                        "patterns": [
                                {
                                        "include": "$self"
                                }
                        ]
                },
                {
                        "begin": "\\b(sig)\\b",
                        "captures": {
                                "1": {
                                        "name": "keyword.other.delimiter.ml"
                                },
                                "2": {
                                        "name": "keyword.other.delimiter.ml"
                                }
                        },
                        "end": "\\b(end)\\b",
                        "name": "meta.module.sigdec.ml",
                        "patterns": [
                                {
                                        "include": "#spec"
                                }
                        ]
                },
                {
                        "match": "\\b(if|then|else)\\b",
                        "name": "keyword.control.ml"
                },
                {
                        "match": "\\b(fun|and)\\s+([\\w]+)\\b",
                        "captures": {
                                "1": {
                                        "name": "keyword.control.fun.ml"
                                },
                                "2": {
                                        "name": "entity.name.function.ml"
                                }
                        }
                },
                {
                        "comment": "String  Constant",
                        "begin": "\"",
                        "beginCaptures": [
                                {
                                        "name": "punctuation.definition.string.begin.ml"
                                }
                        ],
                        "end": "\"",
                        "endCaptures": [
                                {
                                        "name": "punctuation.definition.string.end.ml"
                                }
                        ],
                        "name": "string.quoted.double.ml",
                        "patterns": [
                                {
                                        "match": "\\\\.",
                                        "name": "constant.character.escape.ml"
                                }
                        ]
                },
                {
                        "captures": {
                                "1": {
                                        "name": "punctuation.definition.constant.ml"
                                },
                                "3": {
                                        "name": "punctuation.definition.constant.ml"
                                }
                        },
                        "match": "(#\")(\\\\)?.(\")",
                        "name": "constant.character.ml"
                },
                {
                        "comment": "(word | float | int)",
                        "match": "(?x) \\b(0w\\d+|0wx[0-9A-Fa-f]+ | ~?\\d+\\.\\d+([Ee]~?\\d+)? | ~?0x[0-9A-Fa-f]+|~?\\d+)\\b",
                        "name": "constant.numeric.ml"
                },
                {
                        "match": "\\b(andalso|orelse|not)\\b",
                        "name": "keyword.operator.logical.ml"
                },
                {
                        "begin": "(?x)\\b\n\t\t\t\t\t(functor|structure|signature|funsig)\\s+\n\t\t\t\t\t(\\w+)\\s* # identifier",
                        "captures": {
                                "1": {
                                        "name": "storage.type.module.binder.ml"
                                },
                                "2": {
                                        "name": "entity.name.type.module.ml"
                                }
                        },
                        "end": "(?==|:|\\()",
                        "name": "meta.module.dec.ml"
                },
                {
                        "match": "\\b(open)\\b",
                        "name": "keyword.other.module.ml"
                },
                {
                        "match": "\\b(nil|true|false|NONE|SOME)\\b",
                        "name": "constant.language.ml"
                },
                {
                        "begin": "\\b(type|eqtype) .* =",
                        "captures": {
                                "1": {
                                        "name": "keyword.other.typeabbrev.ml"
                                },
                                "2": {
                                        "name": "variable.other.typename.ml"
                                }
                        },
                        "end": "$",
                        "name": "meta.typeabbrev.ml",
                        "patterns": [
                                {
                                        "match": "(([a-zA-Z0-9\\.\\* ]|(\\->))*)",
                                        "name": "meta.typeexp.ml"
                                }
                        ]
                }
        ],
        "repository": {
                "comments": {
                        "patterns": [
                                {
                                        "begin": "\\(\\*",
                                        "beginCaptures": [
                                                {
                                                        "name": "punctuation.definition.comment.begin.ml"
                                                }
                                        ],
                                        "end": "\\*\\)",
                                        "endCaptures": [
                                                {
                                                        "name": "punctuation.definition.comment.end.ml"
                                                }
                                        ],
                                        "name": "comment.block.ml",
                                        "patterns": [
                                                {
                                                        "include": "#comments"
                                                }
                                        ]
                                }
                        ]
                },
                "keywords": {
                        "patterns": [
                                {
                                        "comment": "Flow control keywords",
                                        "match": "\\b(if|then|else|while)\\b",
                                        "name": "keyword.control.sml"
                                },
                                {
                                        "match": "\\b(before|o|âˆ—|/|mod|div|^||+|-|:=|>|<|>=|<=|=|<>|::|@)\\b",
                                        "name": "keyword.operator.default.infix.sml"
                                },
                                {
                                        "match": "\\bvar\\b",
                                        "name": "keyword.var.sml"
                                }
                        ]
                }
        }
}
